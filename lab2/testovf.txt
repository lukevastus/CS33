1. With -O2 only, only one operation is included in the testovf function, that is, xorl %eax, %eax which would always return 0. This is because by default signed int overflow will lead to undefined behavior, so the method in the original testovf function will not work in this case, causing it to be completely discarded during optimization.

2. With -O2 and -fwrapv the assembly code is as follows:

movabsq $9223372036854775807, %rax
        addq    %rdi, %rax
        cmpq    %rax, %rdi
        setg    %al
        ret

The compiler translates the original testovf function literally into assembly code. It adds n to 9223372036854775807, compares the result to n and set the return value to 0 if n > result and 1 otherwise. Under -fwrapv, arithmetic operations of integers will wrap around when overflow occurs, so if n > 0, n + 9223372036854775807 will be storing a value smaller than n to %rax because only the lower 64 bits of the result are taken. In this case if the result < n, then overflow surely has occured and the function will return 1. 

3. With -O2 and -fsanitize=undefined, the assembly code is as follows:

.LFB0:
        .cfi_startproc
        pushq   %rbp
        .cfi_def_cfa_offset 16
        .cfi_offset 6, -16
        pushq   %rbx
        .cfi_def_cfa_offset 24
        .cfi_offset 3, -24
        movabsq $9223372036854775807, %rdx
        movq    %rdi, %rbp
        movq    %rdi, %rbx
        subq    $8, %rsp
        .cfi_def_cfa_offset 32
        addq    %rdx, %rbp
        jo      .L6
.L2:
        cmpq    %rbp, %rbx
        setg    %al
        addq    $8, %rsp
        .cfi_remember_state
        .cfi_def_cfa_offset 24
        popq    %rbx
        .cfi_def_cfa_offset 16
        popq    %rbp
        .cfi_def_cfa_offset 8
        ret
.L6:
        .cfi_restore_state
        movq    %rdi, %rsi
        movl    $.Lubsan_data0, %edi
        call    __ubsan_handle_add_overflow
        jmp     .L2
        .cfi_endproc

As with -fwrapv, the assembly code still adds 9223372036854775807 to n. However, it then checks the overflow flag and jumps to L6(to call the overflow handling function) if overflow does occur. Afterwards, it sets the return value to 1 or 0 based on whether n + 9223372036854775807 < n, just as with -fwrapv.  
